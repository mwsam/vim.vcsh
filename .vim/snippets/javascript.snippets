# Variable declaration
snippet v
	var ${0:variable_name};
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function (${3}) {
		${0}
	};
# Anonymous Function
snippet f
	function (${1}) {
		${0}
	}${2}
# Anonymous function assigned to variable
snippet vf
	var ${1:function_name} = function (${2}) {
		${0}
	};
# Function assigned to variable
snippet vfn
	var ${1:function_name} = function $1(${2}) {
		${0}
	};
# Immediate function (avoid problem with autoclose)
snippet (f)
	(function ${1}(${3}) {
		${0}
	}(${2}));
# if ... else
snippet ife
	if (${1}) {
		${2}
	}
	else {
		${0}
	}
# else if
snippet eif
	else if (${1}) {
		${0}
	}
# else
snippet el
	else {
		${0}
	}
# tertiary conditional
snippet ?
	${1:condition} ? ${2} : ${0}
# for loop
snippet for
	for (l = ${1:arr}.length, ${2:i} = 0; $2 < l; ++$2) {
		${3}$1[$2]${0}
	}
# Reversed for loop
snippet forr
	for (${2:i} = ${1:arr}.length - 1; $2 >= 0; --$2) {
		${3}$1[$2]${0}
	}
# for in loop
snippet fori
	for (${2:key} in ${1:obj}) {
		if ($1.hasOwnProperty($2)) {
			${3}$1[$2]${0}
		}
	}
# try
snippet try
	try {
		${1}
	}
	catch (${2:err}) {
		${0}
	}
# Object Method
snippet :f
	${1:method_name}: function (${2}) {
		${0}
	}${3:,}
# docstring
snippet /**
	/**
	 * ${0:description}
	 */
# @property
snippet @pro
	@property {${1:type}} ${2:name} ${0:description}
# @returns
snippet @ret
	@returns {${1:type}} ${0:description}

# RequireJS define
snippet def
	define(${1}function (${2}) {
		'use strict';

		${0}
	});
# RequireJS define with dependencies
snippet defd
	define([
		'${1:#dependencies1}'
	], function (
		${2:#dependencies2}
	) {
		'use strict';

		${0}
	});
# RequireJS require
snippet reqjs
	require([
		'${1:#dependencies1}'
	], function (
		${2:#dependencies2}
	) {
		${0}
	});
# console.assert
snippet ca
	console.assert(${0});
# console.error
snippet ce
	console.error(${0});
# console.trace
snippet ct
	console.trace(${0});
# console.warn
snippet cw
	console.warn(${0});
# Debug statement
snippet deb
	/*DEBUG*/
	${0}
	/*END_DEBUG*/
# Inline debug statement
snippet debi
	/*DEBUG*/${0}/*END_DEBUG*/
# Copy arguments to existing array
snippet cargs
	var _i = 0, _l = arguments.length; ${1:args}.length = _l; for (; _i < _l; ++_i) { $1[_i] = arguments[_i]; } // eslint-disable-line${0}
# Slice arguments object into new array
snippet sargs
	var _i = ${2:1}, _end = ${3:arguments.length}, ${1:args} = new Array(Math.max(0, _end - _i)); for (; _i < _end; ++_i) { $1[_i - $2] = arguments[_i]; } // eslint-disable-line${0}
# Slice and copy arguments to existing array
snippet scargs
	var _i = ${2:1}, _end = ${3:arguments.length}; ${1:args}.length = Math.max(0, _end - _i); for (; _i < _end; ++_i) { $1[_i - $2] = arguments[_i]; } // eslint-disable-line${0}
# Copy arguments to new array
snippet vargs
	var _i = 0, _l = arguments.length, ${1:args} = new Array(_l); for (; _i < _l; ++_i) { $1[_i] = arguments[_i]; } // eslint-disable-line${0}
